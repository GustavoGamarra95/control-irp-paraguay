-- Limpieza inicial
drop table if exists resumen_fiscal cascade;
drop table if exists ingresos cascade;
drop table if exists egresos cascade;
drop table if exists configuracion cascade;
drop table if exists irp_data cascade;

-- Eliminar funciones existentes si existen
drop function if exists calcular_iva(numeric, text);
drop function if exists update_updated_at_column();

-- Configuración inicial
create extension if not exists "uuid-ossp";

-- Verificar extensiones necesarias
do $$ 
begin
    if not exists (
        select 1 from pg_extension where extname = 'uuid-ossp'
    ) then
        raise exception 'La extensión uuid-ossp no está instalada';
    end if;
end $$;

-- Crear el esquema si no existe
create schema if not exists public;

-- Asegurar que el esquema public existe y tiene los permisos correctos
grant usage on schema public to postgres, anon, authenticated, service_role;
grant all on all tables in schema public to postgres, anon, authenticated, service_role;
grant all on all functions in schema public to postgres, anon, authenticated, service_role;
grant all on all sequences in schema public to postgres, anon, authenticated, service_role;

-- Crear tipo enum para estados
do $$ 
begin
    if not exists (
        select 1 from pg_type where typname = 'estado_registro'
    ) then
        create type estado_registro as enum ('activo', 'anulado');
    end if;
end $$;

-- Función para actualización automática de updated_at
create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = current_timestamp;
    return new;
end;
$$ language plpgsql;

-- Tabla de configuración del usuario
create table configuracion (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    user_id uuid references auth.users(id),
    tipo_contribuyente text not null check (tipo_contribuyente in ('servicios', 'mixto')),
    familiares_a_cargo integer not null default 0 check (familiares_a_cargo >= 0),
    gastos_personales numeric(15,2) not null default 0 check (gastos_personales >= 0),
    estado estado_registro default 'activo' not null,
    constraint configuracion_user_unique unique (user_id)
);

-- Tabla de ingresos
create table ingresos (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    fecha date not null,
    cliente text not null,
    concepto text,
    monto numeric(15,2) not null check (monto > 0),
    tipo_iva text not null check (tipo_iva in ('5', '10', 'exenta')),
    tipo text not null check (tipo in ('servicios', 'otros')),
    user_id uuid references auth.users(id),
    estado estado_registro default 'activo' not null
);

-- Tabla de egresos
create table egresos (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    fecha date not null,
    proveedor text not null,
    concepto text,
    monto numeric(15,2) not null check (monto > 0),
    tipo_iva text not null check (tipo_iva in ('5', '10', 'exenta')),
    categoria text not null check (categoria in ('gastos', 'familiares')),
    user_id uuid references auth.users(id),
    estado estado_registro default 'activo' not null
);

-- Tabla de resumen fiscal
create table resumen_fiscal (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    user_id uuid references auth.users(id),
    año integer not null check (año >= 2020),
    total_ingresos numeric(15,2) not null default 0,
    total_egresos numeric(15,2) not null default 0,
    iva_credito numeric(15,2) not null default 0,
    iva_debito numeric(15,2) not null default 0,
    irp_determinado numeric(15,2) not null default 0,
    debe_inscribirse boolean not null default false,
    estado estado_registro default 'activo' not null
);

-- Triggers para updated_at
create trigger update_configuracion_updated_at
    before update on configuracion
    for each row
    execute function update_updated_at_column();

create trigger update_ingresos_updated_at
    before update on ingresos
    for each row
    execute function update_updated_at_column();

create trigger update_egresos_updated_at
    before update on egresos
    for each row
    execute function update_updated_at_column();

create trigger update_resumen_fiscal_updated_at
    before update on resumen_fiscal
    for each row
    execute function update_updated_at_column();

-- Políticas de seguridad (RLS)

-- Configuración
alter table configuracion enable row level security;

create policy "Usuarios pueden ver su propia configuración"
    on configuracion for select
    using (auth.uid() = user_id);

create policy "Usuarios pueden insertar su configuración"
    on configuracion for insert
    with check (auth.uid() = user_id);

create policy "Usuarios pueden actualizar su configuración"
    on configuracion for update
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

-- Ingresos
alter table ingresos enable row level security;

create policy "Usuarios pueden ver sus propios ingresos"
    on ingresos for select
    using (auth.uid() = user_id);

create policy "Usuarios pueden insertar sus propios ingresos"
    on ingresos for insert
    with check (auth.uid() = user_id);

create policy "Usuarios pueden eliminar sus propios ingresos"
    on ingresos for delete
    using (auth.uid() = user_id);

-- Egresos
alter table egresos enable row level security;

create policy "Usuarios pueden ver sus propios egresos"
    on egresos for select
    using (auth.uid() = user_id);

create policy "Usuarios pueden insertar sus propios egresos"
    on egresos for insert
    with check (auth.uid() = user_id);

create policy "Usuarios pueden eliminar sus propios egresos"
    on egresos for delete
    using (auth.uid() = user_id);

-- Resumen Fiscal
alter table resumen_fiscal enable row level security;

create policy "Usuarios pueden ver su propio resumen"
    on resumen_fiscal for select
    using (auth.uid() = user_id);

create policy "Usuarios pueden insertar su resumen"
    on resumen_fiscal for insert
    with check (auth.uid() = user_id);

-- Función de utilidad para IVA
create or replace function calcular_iva(monto numeric, tipo_iva text)
returns numeric as $$
begin
    if tipo_iva = 'exenta' then
        return 0;
    elsif tipo_iva in ('5', '10') then
        -- Calculamos el IVA incluido en el precio
        -- Para IVA 5%: monto * (5/105)
        -- Para IVA 10%: monto * (10/110)
        return round(
            case 
                when tipo_iva = '5' then monto * (5.0/105.0)
                when tipo_iva = '10' then monto * (10.0/110.0)
            end
        , 2);
    else
        raise exception 'Tipo de IVA no válido. Debe ser "5", "10" o "exenta"';
    end if;
end;
$$ language plpgsql;

-- Crear tabla irp_data
create table if not exists irp_data (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone default timezone('utc'::text, now()) not null,
    updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
    user_id uuid references auth.users(id) not null,
    ingresos jsonb not null,
    egresos jsonb not null,
    configuracion jsonb not null,
    resumen jsonb not null,
    fecha timestamp with time zone not null,
    estado estado_registro default 'activo' not null
);

-- Trigger para updated_at en irp_data
create trigger update_irp_data_updated_at
    before update on irp_data
    for each row
    execute function update_updated_at_column();

-- Políticas para irp_data
alter table irp_data enable row level security;

create policy "Usuarios pueden ver sus propios datos"
    on irp_data for select
    using (auth.uid() = user_id);

create policy "Usuarios pueden insertar sus propios datos"
    on irp_data for insert
    with check (auth.uid() = user_id);

create policy "Usuarios pueden actualizar sus propios datos"
    on irp_data for update
    using (auth.uid() = user_id)
    with check (auth.uid() = user_id);

create policy "Usuarios pueden eliminar sus propios datos"
    on irp_data for delete
    using (auth.uid() = user_id);

-- Índices
create index idx_ingresos_user_fecha on ingresos(user_id, fecha);
create index idx_egresos_user_fecha on egresos(user_id, fecha);
create index idx_resumen_user_año on resumen_fiscal(user_id, año);
create index idx_ingresos_estado on ingresos(estado);
create index idx_egresos_estado on egresos(estado);
create index idx_irp_data_user_fecha on irp_data(user_id, fecha);

-- Comentarios en las tablas
comment on table configuracion is 'Configuración del contribuyente';
comment on table ingresos is 'Registro de ingresos del contribuyente';
comment on table egresos is 'Registro de egresos del contribuyente';
comment on table resumen_fiscal is 'Resumen fiscal anual del contribuyente';
comment on table irp_data is 'Respaldo de datos fiscales completos del contribuyente';

-- Verificación final
do $$ 
begin
    if not exists (select 1 from information_schema.tables where table_name = 'configuracion') then
        raise exception 'La tabla configuracion no se creó correctamente';
    end if;
    if not exists (select 1 from information_schema.tables where table_name = 'ingresos') then
        raise exception 'La tabla ingresos no se creó correctamente';
    end if;
    if not exists (select 1 from information_schema.tables where table_name = 'egresos') then
        raise exception 'La tabla egresos no se creó correctamente';
    end if;
    if not exists (select 1 from information_schema.tables where table_name = 'resumen_fiscal') then
        raise exception 'La tabla resumen_fiscal no se creó correctamente';
    end if;
    if not exists (select 1 from information_schema.tables where table_name = 'irp_data') then
        raise exception 'La tabla irp_data no se creó correctamente';
    end if;
end $$;
