import { useState, useEffect } from 'react';
import { Plus, FileSpreadsheet, TrendingDown, Trash2 } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { formatearMoneda, exportarExcel } from '@/utlis/calculations';
import { supabase } from '@/lib/supabaseClient';
import type { Expense, IVACalculation } from '@/types';

interface ExpenseManagerProps {
  egresos: Expense[];
  setEgresos: (egresos: Expense[]) => void;
  ivaEgresos: IVACalculation;
  totalEgresos: number;
}

export function ExpenseManager({ egresos, setEgresos, ivaEgresos, totalEgresos }: ExpenseManagerProps) {
  const [nuevoEgreso, setNuevoEgreso] = useState({
    fecha: new Date().toISOString().split('T')[0],
    proveedor: '',
    concepto: '',
    monto_sin_iva_10: '0',
    monto_sin_iva_5: '0',
    monto_exenta: '0',
    categoria: 'gastos' as 'gastos' | 'familiares'
  });
  const [loading, setLoading] = useState(false);

  const agregarEgreso = async () => {
    if (!nuevoEgreso.fecha || !nuevoEgreso.proveedor) {
      alert('Por favor complete los campos obligatorios: Fecha y Proveedor');
      return;
    }

    const montoExenta = parseFloat(nuevoEgreso.monto_exenta) || 0;
    const montoSinIva5 = parseFloat(nuevoEgreso.monto_sin_iva_5) || 0;
    const montoSinIva10 = parseFloat(nuevoEgreso.monto_sin_iva_10) || 0;

    if ((montoExenta + montoSinIva5 + montoSinIva10) <= 0) {
      alert('Por favor ingrese al menos un monto válido mayor a 0');
      return;
    }

    setLoading(true);

    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (!user || userError) {
      alert('Debes iniciar sesión para agregar egresos');
      setLoading(false);
      return;
    }

    // Determinar el tipo de IVA basado en los montos ingresados
    let tipoIva = '10';
    let montoSinIva = 0;
    let montoIva = 0;
    let montoTotal = 0;

    if (montoSinIva10 > 0) {
      tipoIva = '10';
      montoSinIva = montoSinIva10;
      montoIva = montoSinIva10 * 0.1;
      montoTotal = montoSinIva + montoIva;
    } else if (montoSinIva5 > 0) {
      tipoIva = '5';
      montoSinIva = montoSinIva5;
      montoIva = montoSinIva5 * 0.05;
      montoTotal = montoSinIva + montoIva;
    } else if (montoExenta > 0) {
      tipoIva = 'exenta';
      montoSinIva = montoExenta;
      montoIva = 0;
      montoTotal = montoExenta;
    }
    
    const egreso = {
      fecha: nuevoEgreso.fecha,
      proveedor: nuevoEgreso.proveedor,
      concepto: nuevoEgreso.concepto || '-',
      monto_sin_iva: montoSinIva,
      monto_iva: montoIva,
      monto_total: montoTotal,
      tipo_iva: tipoIva,
      categoria: nuevoEgreso.categoria,
      estado: 'activo' as const,
      user_id: user.id
    };

    try {
      const { data: nuevoEgresoData, error: insertError } = await supabase
        .from('egresos')
        .insert([egreso])
        .select()
        .single();

      if (insertError) {
        console.error('Error al insertar:', insertError);
        alert('Error al agregar el egreso. Por favor intente de nuevo.');
        return;
      }

      if (nuevoEgresoData) {
        setEgresos([nuevoEgresoData, ...egresos]);
        
        setNuevoEgreso({
          fecha: new Date().toISOString().split('T')[0],
          proveedor: '',
          concepto: '',
          monto_sin_iva_10: '0',
          monto_sin_iva_5: '0',
          monto_exenta: '0',
          categoria: 'gastos'
        });
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Ocurrió un error al procesar su solicitud.');
    } finally {
      setLoading(false);
    }
  };

  const obtenerEgresos = async () => {
    setLoading(true);
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      
      if (!user || userError) {
        console.error('Error al obtener el usuario:', userError);
        return;
      }

      const { data, error } = await supabase
        .from('egresos')
        .select('*')
        .eq('user_id', user.id)
        .eq('estado', 'activo')
        .order('fecha', { ascending: false });

      if (error) {
        console.error('Error al obtener egresos:', error);
        return;
      }

      if (data) {
        setEgresos(data);
      }
    } catch (error) {
      console.error('Error en obtenerEgresos:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    obtenerEgresos();
  }, []);

  const eliminarEgreso = async (id: number) => {
    try {
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      if (sessionError || !session) {
        console.error('Error de sesión:', sessionError);
        alert('Error de autenticación. Por favor, inicie sesión nuevamente.');
        return;
      }

      if (!confirm('¿Está seguro que desea eliminar este egreso?')) {
        return;
      }

      setLoading(true);

      const { error: updateError } = await supabase
        .from('egresos')
        .update({ 
          estado: 'anulado',
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .eq('user_id', session.user.id)
        .eq('estado', 'activo');

      if (updateError) {
        console.error('Error al eliminar:', updateError);
        alert('Error al eliminar el egreso. ' + updateError.message);
        return;
      }

      setEgresos(egresos.filter(e => e.id !== id));
      alert('Egreso eliminado correctamente');
    } catch (error) {
      console.error('Error al eliminar:', error);
      alert('Ocurrió un error al eliminar el egreso.');
    } finally {
      setLoading(false);
    }
  };

  const exportarExcelEgresos = async () => {
    setLoading(true);
    try {
      const { data, error } = await supabase
        .from('egresos')
        .select('*')
        .order('fecha', { ascending: false });

      if (error) {
        console.error('Error al obtener datos:', error);
        alert('Error al exportar los datos. Por favor intente de nuevo.');
        return;
      }

      if (!data || data.length === 0) {
        alert('No hay datos para exportar');
        return;
      }

      const datos = data.map(e => [
        e.fecha,
        e.proveedor,
        e.concepto,
        e.monto_sin_iva || 0,
        e.monto_iva || 0,
        e.monto_total || 0,
        e.tipo_iva || 'N/A',
        e.categoria === 'gastos' ? 'Negocio' : 'Familiar'
      ]);

      const columnas = [
        'Fecha',
        'Proveedor',
        'Concepto',
        'Monto sin IVA',
        'IVA',
        'Total',
        'Tipo IVA',
        'Categoría'
      ];
      
      exportarExcel(datos, 'egresos', columnas);
    } catch (error) {
      console.error('Error:', error);
      alert('Ocurrió un error al exportar los datos.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-6">
      <Card className="shadow-medium">
        <CardHeader>
          <div className="flex justify-between items-center">
            <CardTitle className="flex items-center">
              <TrendingDown className="h-6 w-6 text-expense mr-2" />
              Gestión de Egresos
            </CardTitle>
            <div className="flex gap-2">
              <Button variant="outline" onClick={obtenerEgresos} disabled={loading}>
                <TrendingDown className="h-4 w-4 mr-2" />
                {loading ? 'Consultando...' : 'Consultar'}
              </Button>
              <Button variant="expense" onClick={agregarEgreso} disabled={loading}>
                <Plus className="h-4 w-4 mr-2" />
                {loading ? 'Guardando...' : 'Guardar'}
              </Button>
              <Button variant="default" onClick={exportarExcelEgresos} disabled={loading}>
                <FileSpreadsheet className="h-4 w-4 mr-2" />
                {loading ? 'Exportando...' : 'Exportar Excel'}
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {/* Formulario de nuevo egreso */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 p-6 bg-muted rounded-lg">
            <Input
              type="date"
              value={nuevoEgreso.fecha}
              onChange={(e) => setNuevoEgreso({...nuevoEgreso, fecha: e.target.value})}
              placeholder="Fecha"
            />
            <Input
              type="text"
              placeholder="Proveedor"
              value={nuevoEgreso.proveedor}
              onChange={(e) => setNuevoEgreso({...nuevoEgreso, proveedor: e.target.value})}
            />
            <Input
              type="text"
              placeholder="Concepto"
              value={nuevoEgreso.concepto}
              onChange={(e) => setNuevoEgreso({...nuevoEgreso, concepto: e.target.value})}
            />
            <Input
              type="number"
              placeholder="Monto Exenta (₲)"
              value={nuevoEgreso.monto_exenta}
              onChange={(e) => setNuevoEgreso({...nuevoEgreso, monto_exenta: e.target.value})}
              className="text-right"
            />
            <Input
              type="number"
              placeholder="Monto Gravada 5% (₲)"
              value={nuevoEgreso.monto_sin_iva_5}
              onChange={(e) => setNuevoEgreso({...nuevoEgreso, monto_sin_iva_5: e.target.value})}
              className="text-right"
            />
            <Input
              type="number"
              placeholder="Monto Gravada 10% (₲)"
              value={nuevoEgreso.monto_sin_iva_10}
              onChange={(e) => setNuevoEgreso({...nuevoEgreso, monto_sin_iva_10: e.target.value})}
              className="text-right"
            />
            <Select 
              value={nuevoEgreso.categoria} 
              onValueChange={(value: 'gastos' | 'familiares') => 
                setNuevoEgreso({...nuevoEgreso, categoria: value})
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="Categoría" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="gastos">Gastos del Negocio</SelectItem>
                <SelectItem value="familiares">Gastos Familiares</SelectItem>
              </SelectContent>
            </Select>
            <Button 
              variant="expense"
              onClick={agregarEgreso}
              className="md:col-span-2"
              disabled={loading}
            >
              <Plus className="h-4 w-4 mr-2" />
              Agregar Egreso
            </Button>
          </div>

          {/* Tabla de egresos */}
          <div className="overflow-x-auto">
            <table className="min-w-full table-auto">
              <thead className="bg-muted">
                <tr>
                  <th className="px-4 py-3 text-left text-sm font-medium text-foreground">Fecha</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-foreground">Proveedor</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-foreground">Concepto</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-foreground">Monto sin IVA</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-foreground">IVA</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-foreground">Total</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-foreground">Tipo</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-foreground">Categoría</th>
                  <th className="px-4 py-3 text-left text-sm font-medium text-foreground">Acciones</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-border">
                {egresos.map((egreso) => (
                  <tr key={egreso.id} className="hover:bg-muted/50 transition-smooth">
                    <td className="px-4 py-3 text-sm">{egreso.fecha}</td>
                    <td className="px-4 py-3 text-sm font-medium">{egreso.proveedor}</td>
                    <td className="px-4 py-3 text-sm">{egreso.concepto}</td>
                    <td className="px-4 py-3 text-sm text-right">{formatearMoneda(egreso.monto_sin_iva || 0)}</td>
                    <td className="px-4 py-3 text-sm text-right">{formatearMoneda(egreso.monto_iva || 0)}</td>
                    <td className="px-4 py-3 text-sm font-bold text-right">{formatearMoneda(egreso.monto_total || 0)}</td>
                    <td className="px-4 py-3">
                      <Badge variant={egreso.tipo_iva === 'exenta' ? 'secondary' : 'default'}>
                        {egreso.tipo_iva === 'exenta' ? 'Exenta' : `${egreso.tipo_iva || 'N/A'}%`}
                      </Badge>
                    </td>
                    <td className="px-4 py-3">
                      <Badge variant={egreso.categoria === 'gastos' ? 'default' : 'secondary'}>
                        {egreso.categoria === 'gastos' ? 'Negocio' : 'Familiar'}
                      </Badge>
                    </td>
                    <td className="px-4 py-3">
                      <Button
                        variant="destructive"
                        size="sm"
                        onClick={() => eliminarEgreso(egreso.id)}
                        disabled={loading}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Resumen de egresos */}
          <div className="mt-6 p-6 bg-expense-light rounded-lg border border-expense/20 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex justify-between items-center p-4 bg-white rounded-lg">
              <span className="font-bold text-lg">Total Pago:</span>
              <span className="text-2xl font-bold text-expense">{formatearMoneda(totalEgresos || 0)}</span>
            </div>
            <div className="flex justify-between items-center p-4 bg-white rounded-lg">
              <span className="font-bold text-lg">Exentas:</span>
              <span className="text-xl font-bold text-expense">{formatearMoneda(ivaEgresos.exentas || 0)}</span>
            </div>
            <div className="flex justify-between items-center p-4 bg-white rounded-lg">
              <span className="font-bold text-lg">Gravadas 5%:</span>
              <span className="text-xl font-bold text-expense">
                {formatearMoneda((ivaEgresos.iva5 * 20) || 0)}
              </span>
            </div>
            <div className="flex justify-between items-center p-4 bg-white rounded-lg">
              <span className="font-bold text-lg">Gravadas 10%:</span>
              <span className="text-xl font-bold text-expense">
                {formatearMoneda((ivaEgresos.iva10 * 10) || 0)}
              </span>
            </div>
            <div className="flex justify-between items-center p-4 bg-white rounded-lg md:col-span-2">
              <span className="font-bold text-lg">IVA Total:</span>
              <span className="text-xl font-bold text-expense">{formatearMoneda(ivaEgresos.total || 0)}</span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
